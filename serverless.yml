service: emporiolambda-be

frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-mocha-plugin
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-mocha-plugin:
    preTestCommands:
      - bash bashScript/startDynamoDBLocal.sh
    postTestCommands:
      - bash bashScript/stopDynamoDBLocal.sh

  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  # you can overwrite defaults here
  # stage: dev
  region: eu-central-1
  environment:
    NAMESPACE: ${opt:stage, self:provider.stage}
    STRIPE_SECRET_KEY: ${ssm:STRIPE_KEY}
    REGION: ${opt:region, self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
      Resource: '*'

resources:
  Resources:
    #BUCKET
    #Bucket for images
    BucketImage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.NAMESPACE}-imagebucket
        AccessControl: PublicRead #da modificare forse

    #COGNITO
    #Cognito - User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.environment.NAMESPACE}-EML-user_pool
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
            Mutable: true
            DeveloperOnlyAttribute: false
          - AttributeDataType: String
            Name: name
            Required: true
            Mutable: true
            DeveloperOnlyAttribute: false
          - AttributeDataType: String
            Name: family_name
            Required: true
            DeveloperOnlyAttribute: false
            Mutable: true
          - AttributeDataType: String
            Name: address
            Required: true
            DeveloperOnlyAttribute: false
            Mutable: true

    #Cognito - Client
    CognitoPoolCLient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.environment.NAMESPACE}-EML-user_pool_client
        UserPoolId:
          Ref: CognitoUserPool
        AllowedOAuthFlowsUserPoolClient: true
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - http://localhost:3000/api/auth/callback/cognito #(indirizzo dopo il login o registrazione)
        LogoutURLs:
          - http://localhost:3000 #da modificare (indirizzo dopo il logout)
        #DefaultRedirectURI: da inserire forse
        GenerateSecret: false

    #Cognito - VenditoreAdminGroup
    CognitoGroupVenditoreAdmin:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: Venditori e Admin che gestiscono il sito
        GroupName: VenditoreAdmin
        #Precedence: Double
        #RoleArn: String
        UserPoolId:
          Ref: CognitoUserPool

    #DYNAMO_DB
    ProductTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH

        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.NAMESPACE}-EML-product
        GlobalSecondaryIndexes:
          - IndexName: name_index
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    CartTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
          - AttributeName: email
            KeyType: HASH

        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.NAMESPACE}-EML-cart

    CategoryTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
          - AttributeName: name
            KeyType: HASH

        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.NAMESPACE}-EML-category

    OrderTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH

        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: date
            AttributeType: S

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.NAMESPACE}-EML-order
        GlobalSecondaryIndexes:
          - IndexName: email_date_index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

functions:
  auth:
    handler: src/auth.handler
    environment:
      USER_POOL_ID: !Ref CognitoUserPool

  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          authorizer:
            name: auth
          cors: true

  #PRODUCT
  createProduct:
    handler: src/endpoints/product/create.index
    events:
      - http:
          path: product
          method: post
          cors: true

  listOfProduct:
    handler: src/endpoints/product/list.index
    events:
      - http:
          path: product
          method: get
          cors: true

  searchOfProduct:
    handler: src/endpoints/product/search.index
    events:
      - http:
          path: product/search/{search}
          method: get
          cors: true

  getByIdProduct:
    handler: src/endpoints/product/getById.index
    events:
      - http:
          path: product/{id}
          method: get
          cors: true

  updateProduct:
    handler: src/endpoints/product/update.index
    events:
      - http:
          path: product/{id}
          method: put
          cors: true

  deleteProduct:
    handler: src/endpoints/product/delete.index
    events:
      - http:
          path: product/{id}
          method: delete
          cors: true

  #CATEGORY
  listOfCategories:
    handler: src/endpoints/category/list.index
    events:
      - http:
          path: category
          method: get
          cors: true

  createCategory:
    handler: src/endpoints/category/create.index
    events:
      - http:
          path: category
          method: post
          cors: true

  deleteCategory:
    handler: src/endpoints/category/delete.index
    events:
      - http:
          path: category/{name}
          method: delete
          cors: true

  #ORDER
  createOrder:
    handler: src/endpoints/order/create.index
    events:
      - http:
          path: order
          method: post
          cors: true

  listOfOrder:
    handler: src/endpoints/order/list.index
    events:
      - http:
          path: order
          method: get
          cors: true

  getByEmailOrder:
    handler: src/endpoints/order/getByEmail.index
    events:
      - http:
          path: order/getByEmail/{email}
          method: get
          cors: true

  getByIdOrder:
    handler: src/endpoints/order/getById.index
    events:
      - http:
          path: order/{id}
          method: get
          cors: true

  #CART
  createCart:
    handler: src/endpoints/cart/create.index
    events:
      - http:
          path: cart
          method: post
          cors: true

  deleteCart:
    handler: src/endpoints/cart/delete.index
    events:
      - http:
          path: cart/{email}
          method: delete
          cors: true
